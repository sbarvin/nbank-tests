package ui;

import com.codeborne.selenide.Condition;
import com.codeborne.selenide.Selenide;
import generators.RandomData;
import models.CreateUserRequest;
import models.CustomerProfileRequest;
import models.CustomerProfileResponse;
import models.LoginUserRequest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.Alert;
import requests.skelethon.Endpoint;
import requests.skelethon.requesters.CrudRequester;
import requests.skelethon.requesters.ValidatedCrudRequester;
import requests.steps.AdminSteps;
import specs.RequestSpecs;
import specs.ResponseSpecs;

import static com.codeborne.selenide.Condition.text;
import static com.codeborne.selenide.Condition.visible;
import static com.codeborne.selenide.Selenide.*;
import static org.assertj.core.api.Assertions.assertThat;

public class UpdateUserNameTest extends BaseTest {

    //‚úÖ Name updated successfully!

    //‚ùå Please enter a valid name.

    //<h2 class="welcome-text">Welcome, <span style="color: rgb(252, 21, 137); font-weight: bold;">1</span>!</h2>

    //<div class="profile-header" style="cursor: pointer;"><div class="user-info" style="padding-right: 20px;">
    // <span class="user-name">1</span><br><span class="user-username">@barvinsk</span></div></div>

    private static CreateUserRequest userRequest;
    private static String authToken;
    private static CustomerProfileResponse.Customer startProfile;

    @BeforeAll
    public static void setup() {
        //—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userRequest = AdminSteps.createUser();

        //–ø–æ–ª—É—á–∞–µ–º authToken
        authToken = new CrudRequester(
                RequestSpecs.unauthSpec(),
                Endpoint.LOGIN,
                ResponseSpecs.requestReturnsOK())
                .post(LoginUserRequest.builder().username(userRequest.getUsername()).password(userRequest.getPassword()).build())
                .extract()
                .header("Authorization");

        startProfile = new ValidatedCrudRequester<CustomerProfileResponse.Customer>(
                RequestSpecs.authAsUser(userRequest.getUsername(), userRequest.getPassword()),
                Endpoint.CUSTOMER_PROFILE,
                ResponseSpecs.requestReturnsOK()
        ).getAll();
    }

    @Test
    public void userCanUpdateNameWithCorrectData() {

        //–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ /dashboard
        Selenide.open("/");

        Selenide.executeJavaScript("localStorage.setItem('authToken', arguments[0]);", authToken);

        Selenide.open("/dashboard");

        //–ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—É /edit-profile –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ h1 —Å —Ç–µ–∫—Å—Ç–æ–º ‚úèÔ∏è Edit Profile
        $(".user-info").click();
        $$("h1").findBy(Condition.exactText("‚úèÔ∏è Edit Profile")).shouldBe(visible);

        //–≤–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ –∏–º—è
        var newName = RandomData.getUsername();
        $("input[placeholder='Enter new name']").setValue(newName);

        //–Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É üíæ Save Changes
        $$("button").findBy(Condition.exactText("üíæ Save Changes")).click();

        //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–ª–ª–µ—Ä—Ç–∞
        Alert alert = switchTo().alert();
        assertThat(alert.getText()).contains("‚úÖ Name updated successfully!");
        alert.accept();

        //–ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /dashboard
        $$("button").findBy(Condition.exactText("üè† Home")).click();

        //–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /dashboard –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è
        $(".welcome-text span").shouldHave(text(newName));
//  –±–∞–≥–∞      $(".user-name").shouldHave(text(newName));

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å c –ø–æ–º–æ—â—å—é api
        var actualProfile = new ValidatedCrudRequester<CustomerProfileResponse.Customer>(
                RequestSpecs.authAsUser(userRequest.getUsername(), userRequest.getPassword()),
                Endpoint.CUSTOMER_PROFILE,
                ResponseSpecs.requestReturnsOK()
        ).getAll();

        Assertions.assertEquals(newName, actualProfile.getName());
    }

    @Test
    public void userCannotUpdateNameWithInvalidData() {

        //–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ /dashboard
        Selenide.open("/");

        Selenide.executeJavaScript("localStorage.setItem('authToken', arguments[0]);", authToken);

        Selenide.open("/dashboard");

        //–ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—É /edit-profile –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ h1 —Å —Ç–µ–∫—Å—Ç–æ–º ‚úèÔ∏è Edit Profile
        $(".user-info").click();
        $$("h1").findBy(Condition.exactText("‚úèÔ∏è Edit Profile")).shouldBe(visible);

        //—É–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑ –ø–æ–ª—è –¥–ª—è –∏–º–µ–Ω–∏
        $("input[placeholder='Enter new name']").clear();

        //–Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É üíæ Save Changes
        $$("button").findBy(Condition.exactText("üíæ Save Changes")).click();

        //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–ª–ª–µ—Ä—Ç–∞
        Alert alert = switchTo().alert();
        assertThat(alert.getText()).contains("‚ùå Please enter a valid name.");
        alert.accept();

        //–ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /dashboard
        $$("button").findBy(Condition.exactText("üè† Home")).click();

        //–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /dashboard –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è
        $(".welcome-text span").shouldHave(text("NoName"));
        $(".user-name").shouldHave(text("NoName"));

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å c –ø–æ–º–æ—â—å—é api
        var actualProfile = new ValidatedCrudRequester<CustomerProfileResponse.Customer>(
                RequestSpecs.authAsUser(userRequest.getUsername(), userRequest.getPassword()),
                Endpoint.CUSTOMER_PROFILE,
                ResponseSpecs.requestReturnsOK()
        ).getAll();

        Assertions.assertEquals(startProfile, actualProfile);
    }

    @Test
    public void userCannotUpdateSameName() {

        //–æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å username
        new ValidatedCrudRequester<CustomerProfileResponse>(
                RequestSpecs.authAsUser(userRequest.getUsername(), userRequest.getPassword()),
                Endpoint.CUSTOMER_PROFILE_UPDATE,
                ResponseSpecs.requestReturnsOK()
        ).put(new CustomerProfileRequest(userRequest.getUsername()));

        startProfile = new ValidatedCrudRequester<CustomerProfileResponse.Customer>(
                RequestSpecs.authAsUser(userRequest.getUsername(), userRequest.getPassword()),
                Endpoint.CUSTOMER_PROFILE,
                ResponseSpecs.requestReturnsOK()
        ).getAll();

        //–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ /dashboard
        Selenide.open("/");

        Selenide.executeJavaScript("localStorage.setItem('authToken', arguments[0]);", authToken);

        Selenide.open("/dashboard");

        //–ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—É /edit-profile –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ h1 —Å —Ç–µ–∫—Å—Ç–æ–º ‚úèÔ∏è Edit Profile
        $(".user-info").click();
        $$("h1").findBy(Condition.exactText("‚úèÔ∏è Edit Profile")).shouldBe(visible);

        //–Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É üíæ Save Changes
        $$("button").findBy(Condition.exactText("üíæ Save Changes")).click();

        //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–ª–ª–µ—Ä—Ç–∞
        Alert alert = switchTo().alert();
        assertThat(alert.getText()).contains("‚ö†Ô∏è New name is the same as the current one.");
        alert.accept();

        //–ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /dashboard
        $$("button").findBy(Condition.exactText("üè† Home")).click();

        //–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /dashboard –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è
        $(".welcome-text span").shouldHave(text("NoName"));
//  –±–∞–≥–∞      $(".user-name").shouldHave(text("NoName"));

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å c –ø–æ–º–æ—â—å—é api
        var actualProfile = new ValidatedCrudRequester<CustomerProfileResponse.Customer>(
                RequestSpecs.authAsUser(userRequest.getUsername(), userRequest.getPassword()),
                Endpoint.CUSTOMER_PROFILE,
                ResponseSpecs.requestReturnsOK()
        ).getAll();

        Assertions.assertEquals(startProfile, actualProfile);
    }
}
